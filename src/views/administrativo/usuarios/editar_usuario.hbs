<style>
    form {
        font-family: 'Arial', sans-serif;
        max-width: 500px;
        margin: auto;
        background: linear-gradient(135deg, #ffffff, #eef2f3);
        padding: 30px;
        border-radius: 15px;
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    }
    label {
        display: block;
        margin-bottom: 5px;
        color: #333;
        font-weight: 600;
    }
    input, select, button {
        display: block;
        width: 100%;
        padding: 12px;
        margin-bottom: 15px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 14px;
    }
    button {
        background: #6c63ff;
        color: white;
        border: none;
        transition: background-color 0.3s;
    }
    button:hover {
        background: #574bdd;
    }
    img {
        display: block;
        margin: 15px auto;
        border-radius: 50%;
        border: 2px solid #ddd;
        width: 120px;
        height: 120px;
        object-fit: cover;
    }
    canvas {
    display: block;
    margin: 10px 0;
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
}

</style>







<form action="/editar_usuario/{{usuario.id}}" method="POST" enctype="multipart/form-data">
    <div>
        <label for="nombre">Nombre:</label>
        <input type="text" id="nombre" name="nombre" value="{{usuario.nombre}}" required>
    </div>
    <div>
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" value="{{usuario.email}}" required>
    </div>
    <div>
        <label for="password">Contraseña:</label>
        <input type="text" id="password" name="password" placeholder="Ingresa nueva contraseña (opcional)">
    </div>
    <div>
        <label for="role">Rol:</label>
       <select id="role" name="role">
    <option value="admin" {{selectedRole usuario.role "admin"}}>Admin</option>
    <option value="tecnico" {{selectedRole usuario.role "tecnico"}}>Técnico</option>
    <option value="cliente" {{selectedRole usuario.role "cliente"}}>Cliente</option>
</select>

    </div>
<div>
    <label for="foto">Foto:</label>
    <input type="file" id="foto" name="foto" accept="image/*">
    {{#if usuario.foto}}
        <img src="{{usuario.foto}}" alt="Foto actual" style="width: 100px; height: 100px; border-radius: 50%;">
    {{/if}}
</div>


<div>
    <label for="firma">Firma:</label>
    <canvas id="signatureCanvas" width="300" height="100" style="border: 1px solid #ddd;"></canvas>
    <button type="button" id="clearCanvas">Borrar Firma</button>
    <input type="hidden" id="firma" name="firma" value="{{usuario.firma}}">
    {{#if usuario.firma}}
    <img src="{{usuario.firma}}" alt="Firma actual" style="width: 100px; height: auto;">
    {{/if}}
</div>



    <button type="submit">Guardar Cambios</button>
</form>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.getElementById('signatureCanvas');
    const ctx = canvas.getContext('2d');
    const clearButton = document.getElementById('clearCanvas');
    const firmaInput = document.getElementById('firma');

    let drawing = false;
    let prevX = 0;
    let prevY = 0;

    const getPosition = (event) => {
        const rect = canvas.getBoundingClientRect();
        if (event.touches) {
            return {
                x: event.touches[0].clientX - rect.left,
                y: event.touches[0].clientY - rect.top,
            };
        } else {
            return {
                x: event.clientX - rect.left,
                y: event.clientY - rect.top,
            };
        }
    };

    const startDrawing = (event) => {
        drawing = true;
        const { x, y } = getPosition(event);
        prevX = x;
        prevY = y;
    };

    const draw = (event) => {
        if (!drawing) return;

        const { x, y } = getPosition(event);

        ctx.lineWidth = 2;
        ctx.lineCap = 'round';
        ctx.strokeStyle = '#000';

        ctx.beginPath();
        ctx.moveTo(prevX, prevY);
        ctx.lineTo(x, y);
        ctx.stroke();

        prevX = x;
        prevY = y;
    };

    const stopDrawing = () => {
        drawing = false;
        const dataURL = canvas.toDataURL('image/png');
        firmaInput.value = dataURL;
    };

    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseleave', stopDrawing);

    canvas.addEventListener('touchstart', (event) => {
        event.preventDefault(); // Evita el scroll mientras dibujas
        startDrawing(event);
    });
    canvas.addEventListener('touchmove', (event) => {
        event.preventDefault();
        draw(event);
    });
    canvas.addEventListener('touchend', stopDrawing);

    clearButton.addEventListener('click', () => {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        firmaInput.value = '';
    });
});

</script>
